From 23707c2d8b7f396429472e8ac4622e9388f071ad Mon Sep 17 00:00:00 2001
From: Andarwinux <Andarwinux@users.noreply.github.com>
Date: Tue, 28 Nov 2023 00:00:00 +0000
Subject: [PATCH] vulkan: rebase patch

---
 ...1-cross-compile-static-linking-hacks.patch | 50 +++++++------------
 packages/vulkan.cmake                         |  2 +-
 2 files changed, 20 insertions(+), 32 deletions(-)

diff --git a/packages/vulkan-0001-cross-compile-static-linking-hacks.patch b/packages/vulkan-0001-cross-compile-static-linking-hacks.patch
index 1764bca52..f1f09bc80 100644
--- a/packages/vulkan-0001-cross-compile-static-linking-hacks.patch
+++ b/packages/vulkan-0001-cross-compile-static-linking-hacks.patch
@@ -1,20 +1,20 @@
-From 7fa8a3b8af1d0281d74bc279eb1cd317751ddd3d Mon Sep 17 00:00:00 2001
+From 9120102716bf9abdea3c6dd3795a3e555de3687d Mon Sep 17 00:00:00 2001
 From: shinchiro <shinchiro@users.noreply.github.com>
 Date: Tue, 10 Oct 2023 21:45:54 +0800
 Subject: [PATCH] loader: cross-compile & static linking hacks
 
 ---
- loader/CMakeLists.txt       |  9 +++++----
+ loader/CMakeLists.txt       |  7 ++++---
  loader/loader.h             |  2 ++
  loader/loader.rc.in         |  4 ++++
  loader/loader_windows.c     |  4 ++++
  loader/vk_loader_platform.h |  3 ++-
  loader/vulkan_own.pc.in     | 11 +++++++++++
- 6 files changed, 28 insertions(+), 5 deletions(-)
+ 6 files changed, 27 insertions(+), 4 deletions(-)
  create mode 100644 loader/vulkan_own.pc.in
 
 diff --git a/loader/CMakeLists.txt b/loader/CMakeLists.txt
-index 0e7d01efc..3012efa20 100644
+index 39f4f6cf5..78fbf23e2 100644
 --- a/loader/CMakeLists.txt
 +++ b/loader/CMakeLists.txt
 @@ -21,8 +21,9 @@ include(CheckIncludeFile)
@@ -28,7 +28,7 @@ index 0e7d01efc..3012efa20 100644
  
      if(ENABLE_WIN10_ONECORE)
          # Note: When linking your app or driver to OneCore.lib, be sure to remove any links to non-umbrella libs (such as
-@@ -310,7 +311,7 @@ if(USE_ASSEMBLY_FALLBACK)
+@@ -311,7 +312,7 @@ if(USE_ASSEMBLY_FALLBACK)
      endif()
  endif()
  
@@ -37,24 +37,15 @@ index 0e7d01efc..3012efa20 100644
      add_library(loader-opt STATIC ${OPT_LOADER_SRCS})
      target_link_libraries(loader-opt PUBLIC loader_specific_options)
      add_dependencies(loader-opt loader_asm_gen_files)
-@@ -356,7 +357,7 @@ if(WIN32)
+@@ -357,7 +358,7 @@ if(WIN32)
      add_dependencies(vulkan loader_asm_gen_files)
  
  else()
--    if(APPLE AND BUILD_STATIC_LOADER)
-+    if(BUILD_STATIC_LOADER)
-         add_library(vulkan STATIC ${NORMAL_LOADER_SRCS} ${OPT_LOADER_SRCS})
-         target_compile_definitions(vulkan PRIVATE BUILD_STATIC_LOADER)
-     else()
-@@ -449,7 +450,7 @@ endif()
- target_link_libraries(vulkan PRIVATE Vulkan::Headers)
- add_library(Vulkan::Loader ALIAS vulkan)
- 
--if (APPLE AND BUILD_STATIC_LOADER)
-+if (APPLE OR BUILD_STATIC_LOADER)
-     # TLDR: This feature only exists at the request of Google for Chromium. No other project should use this!
-     message(NOTICE "Apple STATIC lib: it will be built but not installed, and vulkan.pc and VulkanLoaderConfig.cmake won't be generated!")
-     return()
+-    if(APPLE)
++    if(APPLE OR MINGW)
+         option(APPLE_STATIC_LOADER "Build a loader that can be statically linked. Intended for Chromium usage/testing.")
+         mark_as_advanced(APPLE_STATIC_LOADER)
+     endif()
 diff --git a/loader/loader.h b/loader/loader.h
 index 93346a9d7..6e3f86746 100644
 --- a/loader/loader.h
@@ -115,10 +106,10 @@ index ad65f9e60..2de7d5fef 100644
  bool windows_add_json_entry(const struct loader_instance *inst,
                              char **reg_data,    // list of JSON files
 diff --git a/loader/vk_loader_platform.h b/loader/vk_loader_platform.h
-index 08e2d301b..226abb496 100644
+index 1a84a7dd2..fa3882f3d 100644
 --- a/loader/vk_loader_platform.h
 +++ b/loader/vk_loader_platform.h
-@@ -69,6 +69,7 @@
+@@ -69,11 +69,12 @@
  #include <io.h>
  #include <shlwapi.h>
  #include <direct.h>
@@ -126,15 +117,12 @@ index 08e2d301b..226abb496 100644
  #endif  // defined(_WIN32)
  
  #include "stack_allocation.h"
-@@ -227,7 +228,7 @@ static inline bool loader_platform_is_path(const char *path) { return strchr(pat
- // resources allocated by anything allocated by once init. This isn't a problem for static libraries, but it is for dynamic
- // ones. When building a DLL, we use DllMain() instead to allow properly cleaning up resources.
  
--#if defined(__APPLE__) && defined(BUILD_STATIC_LOADER)
-+#if defined(BUILD_STATIC_LOADER)
- static inline void loader_platform_thread_once_fn(pthread_once_t *ctl, void (*func)(void)) {
-     assert(func != NULL);
-     assert(ctl != NULL);
+-#if defined(APPLE_STATIC_LOADER) && !defined(__APPLE__)
++#if defined(APPLE_STATIC_LOADER) && !defined(__MINGW64__)
+ #error "APPLE_STATIC_LOADER can only be defined on Apple platforms!"
+ #endif
+ 
 diff --git a/loader/vulkan_own.pc.in b/loader/vulkan_own.pc.in
 new file mode 100644
 index 000000000..ed2f30bb2
@@ -153,5 +141,5 @@ index 000000000..ed2f30bb2
 +Libs.private: -lshlwapi -lcfgmgr32
 +Cflags: -I${includedir}
 -- 
-2.42.1
+2.43.0
 
diff --git a/packages/vulkan.cmake b/packages/vulkan.cmake
index 84c2e762f..42e30183e 100644
--- a/packages/vulkan.cmake
+++ b/packages/vulkan.cmake
@@ -19,7 +19,7 @@ ExternalProject_Add(vulkan
         -DENABLE_WERROR=OFF
         -DUSE_MASM=OFF
         -DUSE_GAS=OFF
-        -DBUILD_STATIC_LOADER=ON
+        -DAPPLE_STATIC_LOADER=ON
         -DCMAKE_C_FLAGS='${CMAKE_C_FLAGS} -D__STDC_FORMAT_MACROS -DSTRSAFE_NO_DEPRECATE -Dparse_number=cjson_parse_number'
         -DCMAKE_CXX_FLAGS='${CMAKE_CXX_FLAGS} -D__STDC_FORMAT_MACROS -fpermissive'
     BUILD_COMMAND ${EXEC} ninja -C <BINARY_DIR>
